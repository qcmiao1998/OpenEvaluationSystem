@page "/password"
@using OpenEvaluation.Helpers
@inject AuthenticationStateProvider Authentication
@attribute [Authorize]


<h3>Change Password</h3>

<fieldset class="form-group">
    <div class="form-group">
        <label>Current password</label>
        <input class="form-control" type="password" @bind="CurrentPassword" />
    </div>
    <div class="form-group">
        <label>New password</label>
        <input class="form-control" type="password" @bind="NewPassword" />
    </div>
    <div class="form-group">
        <label>Repeat new password</label>
        <input class="form-control" type="password" @bind="RepeatNewPassword" />
    </div>
    <button type="submit" class="btn btn-primary" @onclick="UpdatePassword">Update</button>
</fieldset>




@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string CurrentPassword { get; set; }
    string NewPassword { get; set; }
    string RepeatNewPassword { get; set; }

    async Task UpdatePassword()
    {
        var userc = (await authenticationStateTask).User;

        var user = Db.Users.FirstOrDefault(u => u.UserId == userc.FindFirst("UserId").Value);

        if (user == null)
        {
            ((AuthenticationService)Authentication).Logout();
            Navigation.NavigateTo("/",true);
            return;
        }
        if (Md5.GetMd5(user.UserId + CurrentPassword) != user.Password)
        {
            ToastService.ShowError("Current password is not correct.", "update failed");
            return;
        }
        if (NewPassword != RepeatNewPassword)
        {
            ToastService.ShowError("New passwords are not match.", "update failed");
            return;
        }
        user.Password = Md5.GetMd5(user.UserId + NewPassword);
        Db.SaveChanges();
        ((AuthenticationService)Authentication).Logout();
        Navigation.NavigateTo("/", true);
    }

}
