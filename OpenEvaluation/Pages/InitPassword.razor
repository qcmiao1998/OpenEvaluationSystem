@page "/initpasswd"
@using OpenEvaluation.Helpers
@inject AuthenticationStateProvider Authentication
@attribute [Authorize(Roles = "NewUser")]

<h3>Initialize Password</h3>

<fieldset class="form-group">

    <table class="table">
        <tr>
            <th>UserId</th>
            <td>@_user.UserId</td>
        </tr>
        <tr>
            <th>Name</th>
            <td>@_user.Name</td>
        </tr>
        <tr>
            <th>Role</th>
            <td>@_user.Role.ToString()</td>
        </tr>
        <tr>
            <th>Password</th>
            <td>
                <input class="form-control" type="password" @bind="NewPassword"/>
            </td>
        </tr>
        <tr>
            <th>Repeat password</th>
            <td>
                <input class="form-control" type="password" @bind="RepeatNewPassword"/>
            </td>
        </tr>
    </table>

    <button type="submit" class="btn btn-primary" @onclick="UpdatePassword">Update</button>

</fieldset>




@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string NewPassword { get; set; }
    string RepeatNewPassword { get; set; }
    User _user;

    void UpdatePassword()
    {
        if (!string.IsNullOrEmpty(_user.Password))
        {
            ((AuthenticationService)Authentication).Logout();
            Navigation.NavigateTo("/", true);
            return;
        }
        if (NewPassword != RepeatNewPassword)
        {
            ToastService.ShowError("New passwords are not match.", "update failed");
            return;
        }
        _user.Password = Md5.GetMd5(_user.UserId + NewPassword);
        Db.SaveChanges();
        ((AuthenticationService)Authentication).Logout();
        Navigation.NavigateTo("/", true);
    }

    protected override async Task OnInitializedAsync()
    {
        var userc = (await authenticationStateTask).User;

        _user = Db.Users.Single(u => u.UserId == userc.FindFirst("UserId").Value);

        await base.OnInitializedAsync();
    }

}
