@page "/group"
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Roles = "Student")]


@if (IsInGroup == true)
{
<h3>My Group</h3>
<h4>Group name</h4>
<p class="text-body">@StudentGroup.GroupName</p>
<h4>Group members</h4>
<table class="table">
    <tbody>
        @foreach (var s in StudentGroup.Users)
        {
            <tr>
                <td>@s.Name</td>
            </tr>
        }
    </tbody>
</table>
}

@if (IsInGroup == false)
{
    <h4>Create Group</h4>
    <div class="card">
        <fieldset class="form-group card-body">
            <div class="form-group">
                <label>Group name</label>
                <input class="form-control" type="text" @bind="StudentGroup.GroupName" />
            </div>
            <div class="card">
                <div class="form-group card-body">
                    <label class="font-weight-bold">Group members</label>
                    <table class="table">
                        <thead>
                        <tr>
                            <th>UserId</th>
                            <th>Name</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var s in StudentGroup.Users)
                        {
                            <tr>
                                <td>@s.UserId</td>
                                <td>@s.Name</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                    <label>Classmate UserId</label>
                    <input class="form-control" type="text" @bind="PendingAddUserId"/>
                    <button type="submit" class="btn btn-primary" @onclick="GroupAddUser">Add member</button>
                </div>
            </div>
            <button type="submit" class="btn btn-primary" @onclick="CreateGroup">Creat Group</button>
        </fieldset>
    </div>

}


<p class="text-warning">@Warning</p>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    bool? IsInGroup { get; set; } = null;

    Data.Group StudentGroup { get; set; }

    async Task CheckStudentInGroup()
    {
        var userc = (await authenticationStateTask).User;
        var user = Db.Users.FirstOrDefault(u => u.UserId == userc.FindFirst("UserId").Value);
        if (user == null)
        {
            Warning = "Please contact the administrator.";
            this.StateHasChanged();
            return;
        }
        var group = Db.Groups.Where(g => g.Users.Contains(user)).Include(g => g.Users).ToList();
        if (group.Count == 0)
        {
            IsInGroup = false;
            StudentGroup = new Data.Group
            {
                GroupId = Guid.NewGuid().ToString(),
                Users = new List<User>(new[] {user})
            };
        }
        else
        {
            IsInGroup = true;
            StudentGroup = group.First();
        }

        this.StateHasChanged();
    }

    string PendingAddUserId { get; set; }
    void GroupAddUser()
    {
        var user = Db.Users.Where(u => u.UserId == PendingAddUserId);
        if (!user.Any())
        {
            Warning = $"User {PendingAddUserId} not found.";
            return;
        }
        if (Db.Groups.Any(g=> g.Users.Any(u => u.UserId == user.FirstOrDefault().UserId)))
        {
            Warning = "The user has been in a group.";
            return;
        }
        if (StudentGroup.Users.Any(u => u.UserId == PendingAddUserId))
        {
            Warning = "The user has been added.";
            return;
        }
        StudentGroup.Users.Add(user.FirstOrDefault());
        PendingAddUserId = String.Empty;
    }

    async Task CreateGroup()
    {
        Db.Groups.Add(StudentGroup);
        Db.SaveChanges();
        await CheckStudentInGroup();
        return;
    }


    string Warning { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await CheckStudentInGroup();
        await base.OnAfterRenderAsync(firstRender);
    }

}
